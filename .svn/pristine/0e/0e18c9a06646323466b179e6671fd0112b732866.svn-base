import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { BehaviorSubject, Observable, tap } from 'rxjs';
import { Router } from '@angular/router';
import { environment } from '../../environments/environment';
import { UserProfile } from '../models/user.model';
import { switchMap } from 'rxjs/operators';

interface LoginResponse {
  access_token: string;
  token_type: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = `${environment.apiUrl}/auth`;
  private tokenKey = 'access_token';

  public currentUser$ = new BehaviorSubject<UserProfile | null>(null);

  constructor(private http: HttpClient, private router: Router) {
    const token = this.getToken();
    if (!token) {
      this.logout()
      
    }
  }

  private getToken(): string | null {
    return localStorage.getItem(this.tokenKey);
  }

  private saveToken(token: string): void {
    localStorage.setItem(this.tokenKey, token);
  }

  private clearToken(): void {
    localStorage.removeItem(this.tokenKey);
  }

  public getAuthHeaders(): HttpHeaders {
    const token = this.getToken();
    return new HttpHeaders({
      Authorization: token ? `Bearer ${token}` : ''
    });
  }

  register(username: number, password: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/register`, { username, password });
  }

  login(username: number, password: string): Observable<LoginResponse> {
    const body = new HttpParams()
      .set('username', username.toString())
      .set('password', password)
      .set('grant_type', 'password'); 

    const headers = new HttpHeaders({
      'Content-Type': 'application/x-www-form-urlencoded'
    });

    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, body.toString(), { headers }).pipe(
      tap(res => this.saveToken(res.access_token))
      // switchMap(() => this.fetchCurrentUser())
    );
  }

  // fetchCurrentUser(): Observable<UserProfile> {
  //   return this.http.get<UserProfile>(`${this.apiUrl}/me`, {
  //     headers: this.getAuthHeaders()
  //   }).pipe(
  //     tap(user => this.currentUser$.next(user))
  //   );
  // }

  logout(): void {
    this.clearToken();
    // this.currentUser$.next(null);
    this.router.navigate(['/login']);
  }

  isLoggedIn(): boolean {
    return !!this.getToken();
  }
}
