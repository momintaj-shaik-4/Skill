from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import Session
from typing import Any

from app.db.deps import get_db
from app.crud.user import authenticate_user, get_user_by_username, create_user
from app.schemas.user import UserLogin, UserOut, Token
from app.deps import get_current_user
from app.core.security import create_access_token

router = APIRouter(prefix="/auth", tags=["auth"])


@router.post("/register", response_model=UserOut, status_code=status.HTTP_201_CREATED)
async def register_user(user_in: UserLogin, db: AsyncSession = Depends(get_db)) -> Any:
    if await get_user_by_username(db, user_in.username):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username already registered"
        )

    await create_user(db, user_in.username, user_in.password)

    return {
        "username": user_in.username,
        "employee_name": None,
        "manager_name": None,
        "role": "employee",
        "direct_reports": []
    }

@router.post("/login", response_model=Token)
async def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: AsyncSession = Depends(get_db),
) -> Any:
    # Await the async function call
    user = await authenticate_user(db, form_data.username, form_data.password)

    if not user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Incorrect username or password"
        )

    access_token = create_access_token(data={"sub": form_data.username})
    return {"access_token": access_token, "token_type": "bearer"}


@router.get("/me", response_model=UserOut)
async def read_current_user(user_info: dict = Depends(get_current_user)) -> Any:
    """
    Returns:
      {
        username: int,
        employee_name: str | null,
        manager_name:  str | null,
        role: "manager" | "employee",
        direct_reports: [ int, ... ]
      }
    """
    return user_info